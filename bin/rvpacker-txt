#!/usr/bin/env ruby
require 'classes'
require 'optparse'

$logging = false
$shuffle = 0
$no = [false, false, false, false] # 0 is whether to NOT process maps, 1 is other, 2 is system, 3 is scripts
$disable_custom_parsing = false

options = {}
OptionParser.new do |command|
    command.banner = "This tool allows to parse RPG Maker project to .txt files and back.\n\nUsage: rvpacker-txt COMMAND [options]\n\nCOMMANDS:\n    read - Parses RPG Maker game files to .txt\n    write - Writes parsed files back to their initial form\nOPTIONS:\n"

    command.on('-d',
               '--input-dir DIRECTORY',
               'Input directory of RPG Maker project.',
               'Must contain "Data" or "original" folder to read,',
               'and additionally "translation" with "maps" and  "other" subdirectories to write.') { |dir| options[:input_dir] = dir }

    command.on('--no',
               "Don't process specified files.",
               'Takes multiple values separated by a comma.',
               'Allowed values: maps, other, system, plugins') do |files|
        actual_files = files.split(',')

        actual_files.each do |file|
            case file
                when "maps"
                    $no[0] = true
                when "other"
                    $no[1] = true
                when "system"
                    $no[2] = true
                when "scripts"
                    $no[3] = true
                else
                    puts "Wrong value for no argument: #{file}.\nAllowed values: maps, other, system, plugins"
                    exit
            end
        end
    end

    command.on('-s',
               '--shuffle NUMBER',
               'At value 1: Shuffles all lines in strings, at value 2: shuffles all lines and words in strings.') { |number| $shuffle = number }

    command.on('--disable-custom-parsing',
               'Disables built-in custom parsing for some games, which may improperly parse/write some games.')

    command.on('-l',
               '--log',
               'Log information while processing.') { $logging = true }

    command.on_tail('-h',
                    '--help',
                    'Show help message.') { puts command; exit }
end.parse!(ARGV)

if ARGV.empty?
    puts 'COMMAND argument is required. Use rvpacker-txt -h for help.'
    exit
end

options[:action] = ARGV.shift

unless %w[read write].include?(options[:action])
    puts 'Invalid command. Allowed commands are: read, write.'
    exit
end

directory = options[:input_dir]
raise "#{directory} not found" unless File.exist?(directory)
directory = File.realpath(directory)

original_directory = Dir.foreach(directory).find { |dirname| dirname.downcase == 'original' || dirname.downcase == 'data' }
raise '"Data" or "original" directory not found within input directory.' if original_directory.nil?

engine = if File.exist?(File.join(directory, original_directory, 'System.rxdata'))
             :xp
         elsif File.exist?(File.join(directory, original_directory, 'System.rvdata'))
             :vx
         elsif File.exist?(File.join(directory, original_directory, 'System.rvdata2'))
             :ace
         else
             raise "Couldn't determine project engine."
         end

RGSS.serialize(engine, options[:action], directory, original_directory,)
